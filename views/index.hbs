<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
    <link rel="stylesheet" href="/style.css">
    <script src="https://kit.fontawesome.com/439de9ba50.js" crossorigin="anonymous"></script>
    <title>Bloom</title>
</head>

<body>

<div class="loader-wrapper">
    <span class="loader"></span>
</div>

    
    <div class="HeaderIndex">
        <nav class="navbarIndex stick" id="navbar">
    
            <div class="" id="">

                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link-index" id="nav-text" href="/"><i class="fas fa-torii-gate fa-fw"></i> Home</a>
                    </li>
                    {{#if user}}
                    <li class="nav-item">
                        <a class="nav-link-index" id="nav-text" href="/body">Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link-index" id="nav-text" href="/auth/logout">Logout <i class="fas fa-power-off fa-fw"></i></a>
                    </li>
                    {{else}}
                    <li class="nav-item">
                        <a class="nav-link-index" id="nav-text" href="/login"><i class="far fa-address-card fa-fw"></i> Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link-index" id="nav-text" href="/register"><i class="far fa-clipboard fa-fw"></i> Register</a>
                    </li>
                    {{/if}}
                </ul>
    
            </div>
        </nav>
    </div>


<section id="header">
<div class="containerHeader container__header">
    
    <div id="aboveTree">
        <div id="verticalText">
            <h2>A journey</h2>
            <h2>In Search</h2>
            <h2>of growth</h2>
        </div>

        <h1>Bloom</h1>

        <div id="poem">
            <h2>Life before death</h2>
            <h2>strength before weakness</h2>
            <h2>journey before destination</h2>

        </div>

    </div>

    <div id="insertTreeIndex"></div>
    <div id="underTree"><img src="./under_treeFF.png"> </img></div>
    
    <div class="underTreeText"> 

        <h1>Welcome to Bloom!</h1>
        <h2>Bloom is a goal tracking website meant to help you visualize and see your progress!</h2>

        <p>The goal of Bloom is to provide a way to visualy track your progress within three separate life categories: Mental, Physical and Spiritual,
           since we often cannot see our individual progress until we step back and take a look at the bigger picture. The reason for the three categories
           is to provide us a way to compare our progress between them in order to help us become a well-rounded person. Our method of visualization is a little
           tree that grows with you as you accomplish your goals and habits </p>

        <h1 id="warningWIP">This Project is currently a Work In Progress</h1>
        <h1>To do-list:</h1>

    <div class="homeToDo">

        <div>
        <h2>Done</h2>
        <ul>
            <li>Dynamic P5.js Tree structure</li>
            <li>Bcrypt secured Login / Register</li>
            <li>JWT authentication</li>
            <li>MySQL database for users</li>
            <li>Local Storage for goals</li>
            <li>Profile Pages</li>
            <li>Goal lists and goals</li>
        </ul>
        </div>

        <div>
        <h2>To-Do</h2>
        <ul>
            <li>Implement mobile view</li>
            <li>Integrate the tree growth algorithm into profile pages</li>
            <li>Add user notes section</li>
            <li>Add delete button for unwanted tasks</li>
            <li>Migrate local storage to the MySQL database</li>
            <li>Add repeatable habits functionality</li>
            <li>Add deadlines</li>
            <li>Add ability to customize colors</li>
        </ul>
        </div>

        <div>
        <h2>Could've done better</h2>
        <ul>
            <li>Use more Handlebars.JS templating instead of static pages</li>
            <li>Better structure and CSS organization</li>
            <li>More professional and modern UI/UX</li>
        </ul>
        </div>
    </div>
        

    </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.6/p5.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.6/addons/p5.dom.min.js"></script>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
        integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
        crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
        integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"
        crossorigin="anonymous"></script>


<script>
    $("document").ready($(".loader-wrapper").fadeOut("slow"));
</script>

<script>
    window.onscroll = function () { myFunction() };

    var navbar = document.getElementById("navbar");
    var sticky = navbar.offsetTop;

    function myFunction() {
        if (window.pageYOffset >= sticky) {
            navbar.classList.add("sticky")
        } else {
            navbar.classList.remove("sticky");
        }
    }
</script>

<script>

    var slider_size,
        slider_level,
        slider_rot,
        slider_lenRand,
        slider_branchProb,
        slider_rotRand,
        slider_Count,
        slider_leafProb;

    var button_seed,
        button_newSeed,
        button_randomParams,
        button_change;

    var label_size,
        label_level,
        label_rot,
        label_lenRand,
        label_branchProb,
        label_rotRand,
        label_leafProb,
        label_perf,
        label_seed,
        label_source,
        label_source2,
        label_Count;

    var div_inputs;

    var input_seed,
        size,
        maxLevel,
        rot,
        lenRan,
        branchProb,
        rotRand,
        leafProb;

    var hide = true,
        prog = 1,
        growing = false,
        mutating = false,
        randSeed = 80,
        paramSeed = Math.floor(Math.random() * 1000),
        randBias = 0;


    //get width of parent div
    let b = document.getElementById("insertTreeIndex");
    let w = b.clientWidth;

  

    const Y_AXIS = 1;
    var b1, b2;

    function setup() {


        //create a canvas instance
        var myCanvas = createCanvas(w, 700);
        myCanvas.parent("insertTreeIndex");


        
        div_inputs = createDiv('');
        div_inputs.id('div_Settings');
        div_inputs.parent("insertTreeIndex");
        div_inputs.style('visibility', 'hidden');

        //size
        slider_size = createSlider(100, 150, 140, 1);
        slider_size.position();
        slider_size.id('slidersIndex');
        slider_size.parent("div_Settings");
        label_size = createSpan('Size');
        label_size.position();
        label_size.parent("div_Settings");

        //recursion level
        slider_level = createSlider(1, 14, 13, 1);
        slider_level.position();
        slider_level.id('slidersIndex');
        slider_level.parent("div_Settings");
        label_level = createSpan('Recursion level');
        label_level.position();
        label_level.parent("div_Settings");

        //length variation
        slider_lenRand = createSlider(0, 1.2, 1.2, 0.01);
        slider_lenRand.position();
        slider_lenRand.id('slidersIndex');
        slider_lenRand.parent("div_Settings");
        label_lenRand = createSpan('Length variation');
        label_lenRand.position();
        label_lenRand.parent("div_Settings");

        //split probability
        slider_branchProb = createSlider(0.72, 1, 0.93, 0.01);
        slider_branchProb.position();
        slider_branchProb.id('slidersIndex');
        slider_branchProb.parent("div_Settings");
        label_branchProb = createSpan('Split probability');
        label_branchProb.position();
        label_branchProb.parent("div_Settings");

        //Goals completed count
        slider_Count = createSlider(0, 100, 0, 1);
        slider_Count.position(-50, -50);

        //flower probability
        slider_leafProb = createSlider(0, 0.45, 0.45, 0.01);
        slider_leafProb.position();
        slider_leafProb.id('slidersIndex');
        slider_leafProb.parent("div_Settings");
        label_leafProb = createSpan('Flower probability');
        label_leafProb.position();
        label_leafProb.parent("div_Settings");


        //Read inputs of sliders initial values ? 
        slider_size.input(function () { readInputs(true) });
        slider_level.input(function () { readInputs(true) });
        slider_lenRand.input(function () { readInputs(true) });
        slider_branchProb.input(function () { readInputs(true) });
        slider_Count.input(function () { readInputs(true) });
        slider_leafProb.input(function () { readInputs(true) });


        button_seed = createButton('Make it Bloom!');
        button_seed.position();
        button_seed.parent("insertTreeIndex");
        button_seed.id('growButton');
        button_seed.mousePressed(function () {
            startGrow();
        });

        button_hide = createButton('Create a Seed');
        button_hide.position();
        button_hide.parent("insertTreeIndex");
        button_hide.id('hideButton');
        button_hide.mouseClicked(showHide);




        // button_randomParams = createButton('Set level to 0.72');
        // button_randomParams.position(10, 1200);
        // button_randomParams.mousePressed(function () {



        //     slider_level.value(13);

        //     readInputs(true);
        // });

        //Darker Color
        b1 = color(39, 40, 39);
        // b2 = color(125, 169, 154);

        //Lighter Color
        b2 = color(56, 134, 151);

        //div_inputs = createDiv('ooga');

        mX = mouseX;
        mY = mouseY;
        panX = 0;
        panY = 0;

        bg = loadImage('index_treeFF.png');


        readInputs(false);
        startGrow();

    }


    function showHide() {
        if (hide == true) {
            showUI();

        }
        else {
            hideUI();


        }
    }

    function showUI() {

        div_inputs.style('visibility', 'initial');

        hide = false;
    }

    function hideUI() {

        div_inputs.style('visibility', 'hidden');

        hide = true;
    }


    function readInputs(updateTree) {
        //Static Values
        rot = ((PI / 2) / 4 - 0.05);
        rotRand = 0.10;


        //Dynamic Values
        completedCount = slider_Count.value();
        size = slider_size.value();
        maxLevel = slider_level.value();
        lenRand = slider_lenRand.value();
        branchProb = slider_branchProb.value();
        leafProb = slider_leafProb.value();

        if (updateTree && !growing) {
            prog = maxLevel + 1;
            loop();
        }
    }



    function windowResized() {
        b = document.getElementById("insertTreeIndex");
        w = b.clientWidth;
        resizeCanvas(w, 700);
    }

    function draw() {

        // stroke(255, 255, 255);
        background(bg);
        //setGradient(0, 0, width, height, b2, b1, Y_AXIS);
        stroke('#2b4e46');

        // background(33, 66, 62);
        translate(width / 2, height);
        scale(1, -1);

        translate(0, 0);

        branch(1, randSeed);



        noLoop();
    }

    function branch(level, seed) {
        if (prog < level)
            return;

        randomSeed(seed);

        var seed1 = random(1000),
            seed2 = random(1000);

        var growthLevel = (prog - level > 1) || (prog >= maxLevel + 1) ? 1 : (prog - level);

        strokeWeight(15 * Math.pow((maxLevel - level + 1) / maxLevel, 2));

        var len = growthLevel * size * (1 + rand2() * lenRand);

        line(0, 0, 0, len / level);
        translate(0, len / level);


        var doBranch1 = rand() < branchProb;
        var doBranch2 = rand() < branchProb;

        var doLeaves = rand() < leafProb;

        if (level < maxLevel) {

            var r1 = rot * (1 + rrand() * rotRand);
            var r2 = -rot * (1 - rrand() * rotRand);

            if (doBranch1) {
                push();
                rotate(r1);
                branch(level + 1, seed1);
                pop();
            }
            if (doBranch2) {
                push();
                rotate(r2);
                branch(level + 1, seed2);
                pop();
            }
        }

        if ((level >= maxLevel || (!doBranch1 && !doBranch2)) && doLeaves) {
            var p = Math.min(1, Math.max(0, prog - level));

            var flowerSize = (size / 100) * p * (1 / 6) * (len / level);

            strokeWeight(4);
            stroke(240 + 15 * rand2(), 140 + 15 * rand2(), 140 + 15 * rand2());

            rotate(-PI);
            for (var i = 0; i <= 8; i++) {
                line(0, 0, 0, flowerSize * (1 + 0.5 * rand2()));
                rotate(2 * PI / 8);
            }
        }
    }

    function startGrow() {
        growing = true;
        prog = 1;
        grow();
    }

    function grow() {
        if (prog > (maxLevel + 3)) {
            prog = maxLevel + 3;
            loop();
            growing = false;
            return;
        }

        var startTime = millis();
        loop();
        var diff = millis() - startTime;

        prog += maxLevel / 8 * Math.max(diff, 20) / 200;
        setTimeout(grow, Math.max(1, 20 - diff));
    }


    function rand() {
        return random(1000) / 1000;
    }

    function rand2() {
        return random(2000) / 1000 - 1;
    }

    function rrand() {
        return rand2() + randBias;
    }

    function setGradient(x, y, w, h, c1, c2, axis) {
        noFill();

        if (axis === Y_AXIS) {
            // Top to bottom gradient
            for (let i = y; i <= y + h; i++) {
                let inter = map(i, y, y + h, 0, 1);
                let c = lerpColor(c1, c2, inter);
                stroke(c);
                line(x, i, x + w, i);
            }
        } else if (axis === X_AXIS) {
            // Left to right gradient
            for (let i = x; i <= x + w; i++) {
                let inter = map(i, x, x + w, 0, 1);
                let c = lerpColor(c1, c2, inter);
                stroke(c);
                line(i, y, i, y + h);
            }
        }
    }


</script>



</div>
</section>
</body>
</html>