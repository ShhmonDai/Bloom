<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
        integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
    <link rel="stylesheet" href="/style.css">
    <script src="https://kit.fontawesome.com/439de9ba50.js" crossorigin="anonymous"></script>
    <title>Body</title>
    
</head>



<body>

<div class="loader-wrapper">
    <span class="loader"></span>
</div>


    <div class="Header2">

        <h1 id="H1H">Bloom</h1>
        <h2>A journey in search of growth</h2>

        <nav class="navbar navbar-expand-md justify-content-center" id="navbar">
            <!-- Toggler/collapsibe Button -->
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
                <span class="navbar-toggler-icon"></span>
            </button>
        
            <div class="collapse navbar-collapse justify-content-center" id="collapsibleNavbar">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" id="homeID" href="/"><i class="fas fa-torii-gate fa-fw"></i> Home</a></li>
                </ul>
        
                <ul class="navbar-nav">
        
                    <li class="nav-item">
                        <a class="nav-link" href="/mind"><i class="fas fa-brain fa-fw"></i> Mind</a></li>
                    <li class="nav-item">
                        <a class="nav-link" href="/body" id="activeNav"><i class="fas fa-dumbbell fa-fw"></i> Body</a></li>
                    <li class="nav-item">
                        <a class="nav-link" href="/spirit"><i class="fas fa-yin-yang fa-fw"></i> Spirit</a></li>
        
                </ul>
        
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" id="logoutID" href="/auth/logout">Logout <i class="fas fa-power-off fa-fw"></i></a>
                    </li>
                </ul>
            </div>
        </nav>
    </div>



<div id="insertTreeIndex"></div>


<!-- Body task page container -->
<div class="ProfilePage" id="PPBody">

        <div class="container">
            <div class="row justify-content-center">
        
        
                {{!-- Start of Mind card --}}
                <div class="col-md-4">
                    <div class="card2">
        
                        <div class="avatar-ctn">
                            <img src="./mind.png" class="avatar" alt="MindImg" />
                        </div>
        
                        <div class="card-body">
                            <h5 class="card-title">Mental Habits</h5>
                            <p class="card-text"> Goals related to mental growth </p>
                            <p class="card-text"> Number of completed goals: {{user.C1C}} </p>
        
                            <div class="all-tasks">
                                <h2 class="task-list-title">My lists</h2>
                                <ul class="task-list" data-lists1>
        
                                </ul>
        
                                <form action="" data-new-list-form1>
                                    <input type="text" class="new list" data-new-list-input1 placeholder="new list name"
                                        aria-label="new list name" />
                                    <button class="btn create" aria-label="create new list">+</button>
                                </form>
                            </div>
        
                            <div class="todo-list" data-list-display-container1>
                                <div class="todo-header">
                                    <h2 class="list-title" data-list-title1>Please make a new list</h2>
                                    <p class="task-count" data-list-count1>0 tasks remaining</p>
                                </div>
        
                                <div class="todo-body">
                                    <div class="tasks" data-tasks1></div>
        
                                    <div class="new-task-creator">
                                        <form action="" data-new-task-form1>
                                            <input type="text" data-new-task-input1 class="new task" placeholder="new task name"
                                                aria-label="new task name" />
                                            <button class="btn create" aria-label="create new task">+</button>
                                        </form>
                                    </div>
        
                                    <div class="delete-stuff">
                                        <button class="btn delete" data-clear-complete-tasks-button1>Clear completed
                                            tasks</button>
                                        <button class="btn delete" data-delete-list-button1>Delete list</button>
                                    </div>
                                </div>
                            </div>
        
        
        
                            <template id="task-template1">
                                <div class="task">
                                    <input type="checkbox" />
                                    <label>
                                        <span class="custom-checkbox"></span>
                                    </label>

                                    <form id="incMind" action="/auth/incrementMind" method="POST">
                                        <input type="hidden" id="id" name="id" value="{{user.id}}" />
                                    </form>
                                        
                                    <form id="decMind" action="/auth/decrementMind" method="POST">
                                        <input type="hidden" id="id" name="id" value="{{user.id}}" />
                                    </form>

                                </div>
                            </template>
        
        
        
                        </div>
                        {{!-- End card body --}}
                    </div>
                    {{!-- End Card --}}
                </div>
        
                {{!-- Start of Body Card --}}
                <div class="col-md-4">
                    <div class="card2" id="activeBody">
        
                        <div class="avatar-ctn">
                            <img src="./body.png" class="avatar" alt="BodyImg" />
                        </div>
        
                        <div class="card-body">
                            <h5 class="card-title">Physical Habits</h5>
                            <p class="card-text"> Goals related to physical growth </p>
                            <p class="card-text"> Number of completed goals: {{user.C2C}} </p>
        
                            <div class="all-tasks">
                                <h2 class="task-list-title">My lists</h2>
                                <ul class="task-list" data-lists2>
        
                                </ul>
        
                                <form action="" data-new-list-form2>
                                    <input type="text" class="new list" data-new-list-input2 placeholder="new list name"
                                        aria-label="new list name" />
                                    <button class="btn create" aria-label="create new list">+</button>
                                </form>
                            </div>
        
                            <div class="todo-list" data-list-display-container2>
                                <div class="todo-header">
                                    <h2 class="list-title" data-list-title2>Please make a new list</h2>
                                    <p class="task-count" data-list-count2>0 tasks remaining</p>
                                </div>
        
                                <div class="todo-body">
                                    <div class="tasks" data-tasks2></div>
        
                                    <div class="new-task-creator">
                                        <form action="" data-new-task-form2>
                                            <input type="text" data-new-task-input2 class="new task" placeholder="new task name"
                                                aria-label="new task name" />
                                            <button class="btn create" aria-label="create new task">+</button>
                                        </form>
                                    </div>
        
                                    <div class="delete-stuff">
                                        <button class="btn delete" data-clear-complete-tasks-button2>Clear completed
                                            tasks</button>
                                        <button class="btn delete" data-delete-list-button2>Delete list</button>
                                    </div>
                                </div>
                            </div>
        
        
        
                            <template id="task-template2">
                                <div class="task">

                                        <input type="checkbox" />
                                    
                                        <label>
                                            <span class="custom-checkbox"></span>
                                        </label>

                                        <form id="incBody" action="/auth/incrementBody" method="POST">
                                            <input type="hidden" id="id" name="id" value="{{user.id}}"/>
                                        </form>

                                        <form id="decBody" action="/auth/decrementBody" method="POST">
                                            <input type="hidden" id="id" name="id" value="{{user.id}}" />
                                        </form>
                                    
                                </div>
                            </template>
        
        
        
        
        
                        </div>
                        {{!-- End card-body --}}
                    </div>
                    {{!-- End card --}}
                </div>
        
                {{!-- Start of Spirit Card --}}
        
                <div class="col-md-4">
                    <div class="card2">
        
                        <div class="avatar-ctn">
                            <img src="./spirit.png" class="avatar" alt="SpiritIMG" />
                        </div>
        
                        <div class="card-body">
                            <h5 class="card-title">Spiritual Habits</h5>
                            <p class="card-text"> Goals related to mental wellbeing </p>
                            <p class="card-text"> Number of completed goals: {{user.C3C}} </p>
                            <div class="all-tasks">
                                <h2 class="task-list-title">My lists</h2>
                                <ul class="task-list" data-lists3>
        
                                </ul>
        
                                <form action="" data-new-list-form3>
                                    <input type="text" class="new list" data-new-list-input3 placeholder="new list name"
                                        aria-label="new list name" />
                                    <button class="btn create" aria-label="create new list">+</button>
                                </form>
                            </div>
        
                            <div class="todo-list" data-list-display-container3>
        
                                <div class="todo-header">
                                    <h2 class="list-title" data-list-title3>Please make a new list</h2>
                                    <p class="task-count" data-list-count3>0 tasks remaining</p>
                                </div>
        
                                <div class="todo-body">
                                    <div class="tasks" data-tasks3></div>
        
                                    <div class="new-task-creator">
                                        <form action="" data-new-task-form3>
                                            <input type="text" data-new-task-input3 class="new task" placeholder="new task name"
                                                aria-label="new task name" />
                                            <button class="btn create" aria-label="create new task">+</button>
                                        </form>
                                    </div>
        
                                    <div class="delete-stuff">
                                        <button class="btn delete" data-clear-complete-tasks-button3>Clear completed
                                            tasks</button>
                                        <button class="btn delete" data-delete-list-button3>Delete list</button>
                                    </div>
                                </div>
                            </div>
        
        
        
                            <template id="task-template3">
                                <div class="task">
                                    <input type="checkbox" />
                                    <label>
                                        <span class="custom-checkbox"></span>
                                    </label>

                                    <form id="incSpirit" action="/auth/incrementSpirit" method="POST">
                                        <input type="hidden" id="id" name="id" value="{{user.id}}" />
                                    </form>
                                        
                                    <form id="decSpirit" action="/auth/decrementSpirit" method="POST">
                                        <input type="hidden" id="id" name="id" value="{{user.id}}" />
                                    </form>

                                </div>
                            </template>
        
        
                        </div>
                    </div>
                </div>
        
            </div>
        </div>

</div>
    


<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.6/p5.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.6/addons/p5.dom.min.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
    integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
    crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
    integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"
    crossorigin="anonymous"></script>

<script defer src="ScriptBody.js"></script>
<script defer src="ScriptMind.js"></script>
<script defer src="ScriptSpirit.js"></script>


<script>
    $("document").ready($(".loader-wrapper").fadeOut("slow"));
</script>


    <script>
        window.onscroll = function () { myFunction() };

        var navbar = document.getElementById("navbar");
        var sticky = navbar.offsetTop;

        function myFunction() {
            if (window.pageYOffset >= sticky) {
                navbar.classList.add("sticky")
            } else {
                navbar.classList.remove("sticky");
            }
        }
    </script>


    {{!-- Hacky way of passing html data to the <script> but it works --}}
<input type="hidden" id="thingIWant" value="{{user.C2C}}"/>

    {{!-- The Tree generation p5 --}}
<script>

    var slider_size,
        slider_level,
        slider_rot,
        slider_lenRand,
        slider_branchProb,
        slider_rotRand,
        slider_Count,
        slider_leafProb;

    var button_seed,
        button_newSeed,
        button_randomParams,
        button_change;

    var label_size,
        label_level,
        label_rot,
        label_lenRand,
        label_branchProb,
        label_rotRand,
        label_leafProb,
        label_perf,
        label_seed,
        label_source,
        label_source2,
        label_Count;

    var div_inputs;

    var input_seed,
        size,
        maxLevel,
        rot,
        lenRan,
        branchProb,
        rotRand,
        leafProb;

    var hide = true,
        prog = 1,
        growing = false,
        mutating = false,
        randSeed = 80,
        paramSeed = Math.floor(Math.random() * 1000),
        randBias = 0;


    //get width of parent div
    let b = document.getElementById("insertTreeIndex");
    let w = b.clientWidth;

    var getV = document.getElementById("thingIWant");
    var goalsCompleted = getV.value; 

    //console.log("getV: " + getV.value)

    const Y_AXIS = 1;
    var b1, b2;



    function setup() {


        //create a canvas instance
        var myCanvas = createCanvas(w, 700);
        myCanvas.parent("insertTreeIndex");


        
        div_inputs = createDiv('');
        div_inputs.id('div_Settings');
        div_inputs.parent("insertTreeIndex");
        div_inputs.style('visibility', 'hidden');

        //size
        slider_size = createSlider(100, 150, 140, 1);
        slider_size.position();
        slider_size.id('slidersIndex');
        slider_size.parent("div_Settings");
        label_size = createSpan('Size');
        label_size.position();
        label_size.parent("div_Settings");

        //recursion level
        slider_level = createSlider(1, 14, 13, 1);
        slider_level.position();
        slider_level.id('slidersIndex');
        slider_level.parent("div_Settings");
        label_level = createSpan('Recursion level');
        label_level.position();
        label_level.parent("div_Settings");

        //length variation
        slider_lenRand = createSlider(0, 1.2, 1.2, 0.01);
        slider_lenRand.position();
        slider_lenRand.id('slidersIndex');
        slider_lenRand.parent("div_Settings");
        label_lenRand = createSpan('Length variation');
        label_lenRand.position();
        label_lenRand.parent("div_Settings");

        //split probability
        slider_branchProb = createSlider(0.72, 1, 0.93, 0.01);
        slider_branchProb.position();
        slider_branchProb.id('slidersIndex');
        slider_branchProb.parent("div_Settings");
        label_branchProb = createSpan('Split probability');
        label_branchProb.position();
        label_branchProb.parent("div_Settings");

        //Goals completed count
        slider_Count = createSlider(0, 150, int(goalsCompleted), 1);
        slider_Count.position();
        slider_Count.id('slidersIndex');
        slider_Count.parent("div_Settings");
        label_Count = createSpan('Goals Completed: ');
        label_Count.position();
        label_Count.parent("div_Settings");

        //flower probability
        slider_leafProb = createSlider(0, 0.45, 0.45, 0.01);
        slider_leafProb.position();
        slider_leafProb.id('slidersIndex');
        slider_leafProb.parent("div_Settings");
        label_leafProb = createSpan('Flower probability');
        label_leafProb.position();
        label_leafProb.parent("div_Settings");


        //Read inputs of sliders initial values ? 
        slider_size.input(function () { readInputs(true) });
        slider_level.input(function () { readInputs(true) });
        slider_lenRand.input(function () { readInputs(true) });
        slider_branchProb.input(function () { readInputs(true) });

        slider_Count.input(function () { readInputs(true) });
        slider_leafProb.input(function () { readInputs(true) });


        /*button_seed = createButton('Make it Bloom!');
        button_seed.position();
        button_seed.parent("insertTreeIndex");
        button_seed.id('growButton');
        button_seed.mousePressed(function () {
            startGrow();
        });

        */

        /*
        button_hide = createButton('Create a Seed');
        button_hide.position(60, 60);
        button_hide.parent("insertTreeIndex");
        button_hide.id('hideButton');
        button_hide.mouseClicked(showHide);
        */
        


        // button_randomParams = createButton('Set level to 0.72');
        // button_randomParams.position(10, 1200);
        // button_randomParams.mousePressed(function () {



        //     slider_level.value(13);

        //     readInputs(true);
        // });


        //TOP CANVAS COLOR
        b2 = color(83, 137, 166);
        // oldb2 = (166, 220, 238)

        //BOTTOM CANVAS COLOR
        b1 = color(166, 220, 238);
        // oldb1 = (83, 137, 166)

        //div_inputs = createDiv('ooga');

        mX = mouseX;
        mY = mouseY;
        panX = 0;
        panY = 0;

        bg = loadImage('index_treeFF.png');


        readInputs(false);
        startGrow();

    }


    function showHide() {
        if (hide == true) {
            showUI();

        }
        else {
            hideUI();


        }
    }

    function showUI() {

        div_inputs.style('visibility', 'initial');

        hide = false;
    }

    function hideUI() {

        div_inputs.style('visibility', 'hidden');

        hide = true;
    }


    function readInputs(updateTree) {
        //Static Values
        rot = ((PI / 2) / 4 - 0.05);
        rotRand = 0.10;

        

        //Dynamic Values
        completedCount = slider_Count.value();
        size = slider_size.value();
        maxLevel = slider_level.value();
        lenRand = slider_lenRand.value();
        branchProb = slider_branchProb.value();
        leafProb = slider_leafProb.value();

        //console.log("completedCount: " + completedCount + " goalsCompleted: " + goalsCompleted);


        if (updateTree && !growing) {
            prog = maxLevel + 1;
            loop();
        }
    }



    function windowResized() {
        b = document.getElementById("insertTreeIndex");
        w = b.clientWidth;
        resizeCanvas(w, 700);
    }

    function draw() {

        // stroke(255, 255, 255);
        // background(bg);
        setGradient(0, 0, width, height, b2, b1, Y_AXIS);
        stroke('#2b4e46');

        // background(33, 66, 62);
        translate(width / 2, height);
        scale(1, -1);

        translate(0, 0);

        branch(1, randSeed);



        noLoop();
    }

    function branch(level, seed) {
        if (prog < level)
            return;

        randomSeed(seed);

        var seed1 = random(1000),
            seed2 = random(1000);

        var growthLevel = (prog - level > 1) || (prog >= maxLevel + 1) ? 1 : (prog - level);

        strokeWeight(15 * Math.pow((maxLevel - level + 1) / maxLevel, 2));

        var len = growthLevel * size * (1 + rand2() * lenRand);

        line(0, 0, 0, len / level);
        translate(0, len / level);


        var doBranch1 = rand() < branchProb;
        var doBranch2 = rand() < branchProb;

        var doLeaves = rand() < leafProb;

        if (level < maxLevel) {

            var r1 = rot * (1 + rrand() * rotRand);
            var r2 = -rot * (1 - rrand() * rotRand);

            if (doBranch1) {
                push();
                rotate(r1);
                branch(level + 1, seed1);
                pop();
            }
            if (doBranch2) {
                push();
                rotate(r2);
                branch(level + 1, seed2);
                pop();
            }
        }

        if ((level >= maxLevel || (!doBranch1 && !doBranch2)) && doLeaves) {
            var p = Math.min(1, Math.max(0, prog - level));

            var flowerSize = (size / 100) * p * (1 / 6) * (len / level);

            strokeWeight(4);
            stroke(215 + 15 * rand2(), 175 + 15 * rand2(), 115 + 15 * rand2());

            rotate(-PI);
            for (var i = 0; i <= 8; i++) {
                line(0, 0, 0, flowerSize * (1 + 0.5 * rand2()));
                rotate(2 * PI / 8);
            }
        }
    }

    function startGrow() {
        growing = true;
        prog = 1;
        grow();
    }

    function grow() {
        if (prog > (maxLevel + 3)) {
            prog = maxLevel + 3;
            loop();
            growing = false;
            return;
        }

        var startTime = millis();
        loop();
        var diff = millis() - startTime;

        prog += maxLevel / 8 * Math.max(diff, 20) / 200;
        setTimeout(grow, Math.max(1, 20 - diff));
    }


    function rand() {
        return random(1000) / 1000;
    }

    function rand2() {
        return random(2000) / 1000 - 1;
    }

    function rrand() {
        return rand2() + randBias;
    }

    function setGradient(x, y, w, h, c1, c2, axis) {
        noFill();

        if (axis === Y_AXIS) {
            // Top to bottom gradient
            for (let i = y; i <= y + h; i++) {
                let inter = map(i, y, y + h, 0, 1);
                let c = lerpColor(c1, c2, inter);
                stroke(c);
                line(x, i, x + w, i);
            }
        } else if (axis === X_AXIS) {
            // Left to right gradient
            for (let i = x; i <= x + w; i++) {
                let inter = map(i, x, x + w, 0, 1);
                let c = lerpColor(c1, c2, inter);
                stroke(c);
                line(i, y, i, y + h);
            }
        }
    }


</script>



</body>

</html>